# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by scripts/make-github-workflows automagically.
name: CI
on:
  push:
    branches:
      - master
jobs:
  linux-build:
    strategy:
      matrix:
        rust:
          - stable
          #- nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -v --release
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -v --release
  macos-build:
    strategy:
      matrix:
        rust:
          - stable
          #- nightly
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -v --release
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -v --release
  arm-linux-build:
    strategy:
      matrix:
        target:
          - arm-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -v --release --target=${{ matrix.target }}
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: -v --release --target=${{ matrix.target }}
  coverage:
    needs:
      - linux-build
      - macos-build
      - arm-linux-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
      - uses: actions-rs/grcov@v0.1
        id: coverage
      - name: Upload coverage data to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
  docker-build-images:
    needs:
      - linux-build
      - macos-build
      - arm-linux-build
    if: github.repository == 'mirakc/mirakc'
    strategy:
      matrix:
        platform:
          - alpine
          - debian
        arch:
          - amd64
          - arm32v6
          - arm32v7
          - arm64v8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Setup QEMU user-mode emulation
        run: |-
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Make mirakurun.openapi.json
        run: |-
          # Wait 10 seconds for safety.
          ./scripts/mirakurun-openapi-json -w 10 $MIRAKURUN_VERSION | ./scripts/fixup-openapi-json >mirakurun.openapi.json
      - name: Build image
        run: |-
          ./docker/dockerfile-gen ${{ matrix.platform }} ${{ matrix.arch }} >Dockerfile
          docker build -t $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} --no-cache .
      - name: Login to DockerHub
        run: |-
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image
        run: |-
          docker push $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}
      - name: Update latest tags for each platform
        run: |-
          docker tag $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${{ matrix.platform }}-${{ matrix.arch }}
          docker push $IMAGE:${{ matrix.platform }}-${{ matrix.arch }}
        if: env.VERSION != 'master'
      - name: Update the main platform tags
        run: |-
          docker tag $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${VERSION}-${{ matrix.arch }}
          docker push $IMAGE:${VERSION}-${{ matrix.arch }}
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update latest tags for the main platform
        run: |-
          docker tag $IMAGE:${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${{ matrix.arch }}
          docker push $IMAGE:${{ matrix.arch }}
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
  docker-build-multiarch-image:
    strategy:
      matrix:
        platform:
          - alpine
          - debian
    runs-on: ubuntu-latest
    needs:
      - docker-build-images
    steps:
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Login to DockerHub
        run: |-
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push the manifest for each platform
        run: |-
          docker manifest create $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-amd64 $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v6 $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v7 $IMAGE:${VERSION}-${{ matrix.platform }}-arm64v8
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:${VERSION}-${{ matrix.platform }}
      - name: Update latest tag for each platform
        run: |-
          docker manifest create $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-amd64 $IMAGE:${{ matrix.platform }}-arm32v6 $IMAGE:${{ matrix.platform }}-arm32v7 $IMAGE:${{ matrix.platform }}-arm64v8
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:${{ matrix.platform }}
        if: env.VERSION != 'master'
      - name: Update the version tag for the main platform
        run: |-
          docker manifest create $IMAGE:$VERSION $IMAGE:${VERSION}-amd64 $IMAGE:${VERSION}-arm32v6 $IMAGE:${VERSION}-arm32v7 $IMAGE:${VERSION}-arm64v8
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:$VERSION
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update the latest tag for the main platform
        run: |-
          docker manifest create $IMAGE $IMAGE:amd64 $IMAGE:arm32v6 $IMAGE:arm32v7 $IMAGE:arm64v8
          docker manifest annotate $IMAGE $IMAGE:arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE $IMAGE:arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE $IMAGE:arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
env:
  IMAGE: mirakc/mirakc
  MAIN_PLATFORM: debian
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  MIRAKURUN_VERSION: '3.3.0'
