# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by scripts/make-github-workflows automagically.
name: CI
on:
  push:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        runner:
          - macOS-latest
          - ubuntu-latest
        rust:
          - stable
          #- nightly
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache for Cargo
        if: "!startsWith(matrix.runner, 'macOS')"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -v --release
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -v --release
  cross-build:
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        rust:
          - stable
          #- nightly
        target:
          - arm-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache for Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.rust }}-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -v --release --target=${{ matrix.target }}
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: -v --release --target=${{ matrix.target }}
  coverage:
    needs:
      - build
      - cross-build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Clean
        uses: actions-rs/cargo@v1
        with:
          command: clean
      - name: Run coverage tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
      - name: Install grcov
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov
      - name: Generate coverage data
        run: >-
          grcov target/debug --branch --llvm --ignore-not-existing -s . --ignore '*/src/main.rs' --ignore '*/src/error.rs' --ignore '*/src/tracing_ext.rs' --excl-line '<coverage:exclude/>|unimplemented!|unreachable!' --excl-start '<coverage:exclude>' --excl-stop '</coverage:exclude>' -t lcov -o lcov.info
      - name: Update to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docker:
    needs:
      - build
      - cross-build
    strategy:
      matrix:
        target:
          - alpine
          - debian
        include:
          - target: alpine
            platforms: >-
              linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64/v8,
          - target: debian
            platforms: >-
              linux/amd64, linux/arm/v7, linux/arm64/v8,
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker tags
        id: docker-tags
        run: |
          IMAGE="${{ env.DOCKERHUB_IMAGE }}"
          VERSION="$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)"
          TAGS="$IMAGE:${VERSION}-${{ matrix.target }}"
          if [ "${{ matrix.target }}" = "debian" ]; then
            TAGS="$TAGS,$IMAGE:${VERSION}"
          fi
          if [ "$VERSION" != "master" ]; then
            # Always update latest image tags.
            TAGS="$TAGS,$IMAGE:${{ matrix.target }}"
            if [ "${{ matrix.target }}" = "debian" ]; then
              TAGS="$TAGS,$IMAGE:latest"
            fi
          fi
          echo "Version: $VERSION"
          echo "Tags: $TAGS"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=tags::$TAGS"
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock', 'docker/build-scripts/*') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.target }}-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Make mirakurun.openapi.json
        run: |
          ./scripts/mirakurun-openapi-json -w 10 $MIRAKURUN_VERSION | ./scripts/fixup-openapi-json >mirakurun.openapi.json
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.target }}
          platforms: ${{ matrix.platforms }}
          tags: ${{ steps.docker-tags.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
      - name: Test
        run: |
          # Enable experimental CLI features in Docker daemon.
          echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

          IMAGE="${{ env.DOCKERHUB_IMAGE }}:${{ steps.docker-tags.outputs.version }}-${{ matrix.target }}"
          for platform in $(echo ${{ matrix.platforms }} | tr ',' ' ')
          do
            echo "Testing $IMAGE for $platform..."
            docker run --rm --platform=$platform $IMAGE --version
            docker run --rm --platform=$platform --entrypoint=recdvb $IMAGE --version
            docker run --rm --platform=$platform --entrypoint=recpt1 $IMAGE --version
            docker run --rm --platform=$platform --entrypoint=mirakc-arib $IMAGE --version
          done
env:
  DOCKERHUB_IMAGE: mirakc/mirakc
  MIRAKURUN_VERSION: '3.5.0'
