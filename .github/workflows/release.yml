# DO NOT EDIT THIS FILE BY HAND.
#
# This file was generated by scripts/make-github-workflows automagically.
name: Release
on:
  push:
    tags:
      - '*'
jobs:
  docker:
    strategy:
      matrix:
        distro:
          - alpine
          - debian
        include:
          - distro: alpine
            platforms: >-
              linux/386, linux/amd64, linux/arm/v6, linux/arm/v7, linux/arm64/v8,
          - distro: debian
            platforms: >-
              linux/386, linux/amd64, linux/arm/v7, linux/arm64/v8,
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker tags
        id: docker-tags
        run: |
          IMAGE="{0}"  # placeholder
          if echo "$GITHUB_REF" | grep -e '^refs/heads/' >/dev/null 2>&1; then
            GIT_BRANCH=$(echo "$GITHUB_REF" | sed -e 's|^refs/heads/||')
            MAIN_TAG="$IMAGE:$GIT_BRANCH-${{ matrix.distro }}"
            TAGS="$MAIN_TAG"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:$GIT_BRANCH"
            fi
            VERSION="$GIT_BRANCH"
          else
            GIT_TAG=$(echo "$GITHUB_REF" | sed -e 's|^refs/tags/||')
            MAIN_TAG="$IMAGE:$GIT_TAG-${{ matrix.distro }}"
            TAGS="$MAIN_TAG"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:$GIT_TAG"
            fi
            # Always update latest image tags when a new git tag is created.
            TAGS="$TAGS,$IMAGE:${{ matrix.distro }}"
            if [ "$MAIN_DISTRO" = "${{ matrix.distro }}" ]; then
              TAGS="$TAGS,$IMAGE:latest"
            fi
            VERSION="$GIT_TAG"
          fi
          echo "Main tag: $MAIN_TAG"
          echo "Tags: $TAGS"
          echo "Version: $VERSION"
          echo "::set-output name=main-tag::$MAIN_TAG"
          echo "::set-output name=tags::$TAGS"
          echo "::set-output name=version::$VERSION"
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache for buildenv and tools
        uses: actions/cache@v2
        with:
          path: /tmp/.docker-buildenv-tools-cache
          key: ${{ runner.os }}-docker-buildenv-tools-${{ matrix.distro }}-${{ hashFiles('docker/build-scripts/*') }}
      # Disable cache for mirakc in order to avoid errors like below:
      #
      #  Unhandled exception. System.IO.IOException: No space left on device at System.IO.FileStream.WriteNative(ReadOnlySpan`1 source) at
      #  ...
      #
      # - name: Cache for mirakc
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.docker-cache
      #     key: ${{ runner.os }}-docker-${{ matrix.distro }}-${{ hashFiles('**/Cargo.lock', 'docker/build-scripts/*') }}
      #     restore-keys: |
      #       ${{ runner.os }}-docker-${{ matrix.distro }}-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Make mirakurun.openapi.json
        run: |
          ./scripts/mirakurun-openapi-json $MIRAKURUN_VERSION | ./scripts/fixup-openapi-json >mirakurun.openapi.json
      - name: Build buildenv
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: buildenv
          platforms: ${{ matrix.platforms }}
          cache-from: |
            type=local,src=/tmp/.docker-buildenv-tools-cache
          cache-to: |
            type=local,dest=/tmp/.docker-buildenv-tools-cache
      - name: Build tools
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: mirakc-tools
          platforms: ${{ matrix.platforms }}
          cache-from: |
            type=local,src=/tmp/.docker-buildenv-tools-cache
          cache-to: |
            type=local,dest=/tmp/.docker-buildenv-tools-cache
      - name: Build and push (mirakc/mirakc)
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: mirakc
          platforms: ${{ matrix.platforms }}
          tags: ${{ format(steps.docker-tags.outputs.tags, 'mirakc/mirakc') }}
          cache-from: |
            type=local,src=/tmp/.docker-buildenv-tools-cache
            type=local,src=/tmp/.docker-cache
          cache-to: |
            type=local,dest=/tmp/.docker-cache
          push: true
      - name: Test
        run: |
          # Enable experimental CLI features in Docker daemon.
          echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

          TAG="${{ format(steps.docker-tags.outputs.main-tag, 'mirakc/mirakc') }}"
          for platform in $(echo ${{ matrix.platforms }} | tr ',' ' ')
          do
            echo "Testing $TAG for $platform..."
            docker run --rm --platform=$platform $TAG --version
            docker run --rm --platform=$platform --entrypoint=recdvb $TAG --version
            docker run --rm --platform=$platform --entrypoint=recpt1 $TAG --version
            docker run --rm --platform=$platform --entrypoint=mirakc-arib $TAG --version
            docker run --rm --platform=$platform --entrypoint=mirakc $TAG --version
          done
      - name: Build and push (mirakc/timeshift-fs)
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.distro }}
          target: mirakc-timeshift-fs
          platforms: ${{ matrix.platforms }}
          tags: ${{ format(steps.docker-tags.outputs.tags, 'mirakc/timeshift-fs') }}
          cache-from: |
            type=local,src=/tmp/.docker-buildenv-tools-cache
            type=local,src=/tmp/.docker-cache
          cache-to: |
            type=local,dest=/tmp/.docker-cache
          push: true
        if: matrix.distro == 'debian'
env:
  MAIN_DISTRO: debian
  MIRAKURUN_VERSION: '3.5.0'
