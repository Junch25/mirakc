#!/bin/sh

set -eu

PROGNAME=$(basename $0)
BASEDIR=$(cd $(dirname $0); pwd)

if [ "$(uname)" != Linux ] || id -nG | grep -q docker; then
  DOCKER='docker'
else
  DOCKER='sudo docker'
fi

BASE_IMAGE='node:10-buster-slim'
IMAGE='mirakurun-openapi-json/mirakurun'

CLEAN=no
PORT=40772
WAIT=2
VERSION=latest
CONTAINER=

help() {
  cat <<EOF >&2
Print OpenAPI/Swagger JSON obtained from Mirakurun

USAGE:
  mirakurun-openapi-json -h | --help
  mirakurun-openapi-json [version]

OPTIONS:
  -h, --help
    Show help

  -c, --clean
    Remove $IMAGE and $BASE_IMAGE at exit.

  -p, --port  [default: $PORT]
    TCP port to be exposed for Mirakurun.

  -w, --wait <wait>  [default: $WAIT]
    Time to wait for Mirakurun to start (seconds).

ARGUMENTS:
  version  [default: $VERSION]
    Mirakurun version like 3.1.0, which is one of available tags for the
    chinachu/mirakurun Docker image.

DESCRIPTION:
  This script obtains OpenAPI/Swagger JSON from Mirakurun launched on a Docker
  container.

TYPICAL USAGE:
  mirakurun-openapi-json -c >/path/to/mirakurun.openapi.json
EOF
  exit 0
}

log() {
  echo "$1" >&2
}

error() {
  log "ERROR: $1"
  exit 1
}

clean() {
  sleep 1
  if [ -n "$CONTAINER" ]; then
    $DOCKER container rm -f "$CONTAINER" >/dev/null
    log "Removed $CONTAINER"
  fi
  if [ "$CLEAN" = yes ]; then
    $DOCKER image rm -f $IMAGE >/dev/null
    log "Removed $IMAGE"
  fi
}

while [ $# -gt 0 ]
do
  case "$1" in
    '-h' | '--help')
      help
      ;;
    '-c' | '--clean')
      CLEAN=yes
      shift
      ;;
    '-p' | '--port')
      PORT="$2"
      shift 2
      ;;
    '-w' | '--wait')
      WAIT="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

if [ $# -gt 0 ]; then
  VERSION="$1"
fi

IMAGE="chinachu/mirakurun:$VERSION"

trap "clean" EXIT

log "Launching $IMAGE..."
CONTAINER=$($DOCKER run --rm --init -d --cap-add SYS_ADMIN --cap-add SYS_NICE \
              -p $PORT:40772 $IMAGE)

log "Waiting $WAIT seconds..."
sleep $WAIT

log "Getting OpenAPI/Swagger JSON..."
curl -fsSL http://localhost:$PORT/api/docs
