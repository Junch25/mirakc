env:
  IMAGE: masnagam/mirakc
  MAIN_PLATFORM: debian
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  MIRAKURUN_VERSION: '3.1.0'

jobs:
  docker-build-images:
    # Don't run on a fork.
    if: github.repository == 'masnagam/mirakc'
    strategy:
      matrix:
        platform:
          - alpine
          - debian
        arch:
          - amd64
          - arm32v6
          - arm32v7
          - arm64v8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Setup QEMU user-mode emulation
        run: |-
          sudo apt-get update
          sudo apt-get install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Make mirakurun.openapi.json
        run: |-
          # Wait 10 seconds for safety.
          ./scripts/mirakurun-openapi-json -w 10 $MIRAKURUN_VERSION | ./scripts/fixup-openapi-json >mirakurun.openapi.json
      - name: Build image
        # Experimental features including the --squash option has not been
        # supported in GitHub Actions at this moment...
        run: |-
          ./docker/dockerfile-gen ${{ matrix.platform }} ${{ matrix.arch }} >Dockerfile
          docker build -t $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} --no-cache .
      - name: Login to DockerHub
        run: |-
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image
        run: |-
          docker push $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}
      - name: Update latest tags for each platform
        run: |-
          docker tag $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${{ matrix.platform }}-${{ matrix.arch }}
          docker push $IMAGE:${{ matrix.platform }}-${{ matrix.arch }}
        if: env.VERSION != 'master'
      - name: Update the main platform tags
        run: |-
          docker tag $IMAGE:${VERSION}-${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${VERSION}-${{ matrix.arch }}
          docker push $IMAGE:${VERSION}-${{ matrix.arch }}
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update latest tags for the main platform
        run: |-
          docker tag $IMAGE:${{ matrix.platform }}-${{ matrix.arch }} $IMAGE:${{ matrix.arch }}
          docker push $IMAGE:${{ matrix.arch }}
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
  docker-build-multiarch-image:
    strategy:
      matrix:
        platform:
          - alpine
          - debian
    runs-on: ubuntu-latest
    needs:
      - docker-build-images
    steps:
      - name: Set VERSION
        run: |-
          echo ::set-env name=VERSION::${GITHUB_REF#refs/*/}
      - name: Login to DockerHub
        run: |-
          docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create and push the manifest for each platform
        # The Debian image for arm32v6 is actually based on the arm/v5
        # architecture.  The arm/v6 architecture has a backward-compatibility
        # with the arm/v5 architecture.  So, we specify v6 in the --variant
        # option for the arm32v6 image.
        run: |-
          docker manifest create $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-amd64 $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v6 $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v7 $IMAGE:${VERSION}-${{ matrix.platform }}-arm64v8
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:${VERSION}-${{ matrix.platform }} $IMAGE:${VERSION}-${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:${VERSION}-${{ matrix.platform }}
      - name: Update latest tag for each platform
        run: |-
          docker manifest create $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-amd64 $IMAGE:${{ matrix.platform }}-arm32v6 $IMAGE:${{ matrix.platform }}-arm32v7 $IMAGE:${{ matrix.platform }}-arm64v8
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:${{ matrix.platform }} $IMAGE:${{ matrix.platform }}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:${{ matrix.platform }}
        if: env.VERSION != 'master'
      - name: Update the version tag for the main platform
        run: |-
          docker manifest create $IMAGE:$VERSION $IMAGE:${VERSION}-amd64 $IMAGE:${VERSION}-arm32v6 $IMAGE:${VERSION}-arm32v7 $IMAGE:${VERSION}-arm64v8
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE:$VERSION $IMAGE:${VERSION}-arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE:$VERSION
        if: matrix.platform == env.MAIN_PLATFORM
      - name: Update the latest tag for the main platform
        run: |-
          docker manifest create $IMAGE $IMAGE:amd64 $IMAGE:arm32v6 $IMAGE:arm32v7 $IMAGE:arm64v8
          docker manifest annotate $IMAGE $IMAGE:arm32v6 --os linux --arch arm --variant v6
          docker manifest annotate $IMAGE $IMAGE:arm32v7 --os linux --arch arm --variant v7
          docker manifest annotate $IMAGE $IMAGE:arm64v8 --os linux --arch arm64 --variant v8
          docker manifest push $IMAGE
        if: env.VERSION != 'master' && matrix.platform == env.MAIN_PLATFORM
