#!/bin/sh -eu

BASEDIR=$(cd $(dirname $0); pwd)
PROJDIR=$(cd $BASEDIR/..; pwd)

if [ "$(uname)" != Linux ] || id -nG | grep -q docker; then
  DOCKER='docker'
else
  DOCKER='sudo docker'
fi

IMAGE='mcr.microsoft.com/vscode/devcontainers/rust:1'
CLEAN=no

help() {
  cat <<EOF >&2
Print OpenAPI/Swagger JSON obtained from Mirakurun.

USAGE:
  $PROGNAME [options]
  $PROGNAME -h | --help

OPTIONS:
  -h, --help
    Show help.

  -c, --clean
    Remove $IMAGE at exit.
EOF
  exit 0
}

clean() {
  sleep 1
  if [ "$CLEAN" = yes ]; then
    $DOCKER image rm -f $IMAGE >/dev/null
    echo "Removed $IMAGE"
  fi
}

while [ $# -gt 0 ]
do
  case "$1" in
    '-h' | '--help')
      help
      ;;
    '-c' | '--clean')
      CLEAN=yes
      shift
      ;;
    *)
      break
      ;;
  esac
done

trap "clean" EXIT INT TERM

echo "Downloading $IMAGE..."
$DOCKER image pull $IMAGE

echo "Getting the commit hash of rustc contained in $IMAGE..." >&2
COMMIT_HASH=$($DOCKER run --rm $IMAGE rustc -vV | grep 'commit-hash' | cut -d ' ' -f 2)

echo "Getting the path of the default toolchain contained in $IMAGE..." >&2
TOOLCHAIN_PATH=$($DOCKER run --rm $IMAGE rustup toolchain list -v | grep '(default)' | cut -f 2)

echo "Updating sourcemap variables in $PROJDIR/.devcontainer/Dockerfile..." >&2
# Use `|` instead of `/` because TOOLCHAIN_PATH contains `/`.
sed -e "s|^ENV MIRAKC_DEV_RUSTC_COMMIT_HASH=.*|ENV MIRAKC_DEV_RUSTC_COMMIT_HASH=\"$COMMIT_HASH\"|" \
    -e "s|^ENV MIRAKC_DEV_RUST_TOOLCHAIN_PATH=.*|ENV MIRAKC_DEV_RUST_TOOLCHAIN_PATH=\"$TOOLCHAIN_PATH\"|" \
    $PROJDIR/.devcontainer/Dockerfile | sponge $PROJDIR/.devcontainer/Dockerfile
