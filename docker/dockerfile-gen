#!/usr/bin/env python

"""
Generate Dockerfile for an architecture

USAGE:
  dockerfile-gen -h | --help
  dockerfile-gen <platform> <arch>
  dockerfile-gen --devcontainer <arch>

OPTIONS:
  -h, --help
    Show help

  --devcontainer
    Generate Dockerfile for debugging with VS Code Remote Containers.

    Support only Debian-based containers.

ARGUMENTS:
  <platform>
    The following platforms are supported.

      * alpine (3.11)
      * debian (buster)

  <arch>
    The following CPU architectures are supported.

      * amd64
      * arm32v6
      * arm32v7
      * arm64v8

DESCRIPTION:
  dockerfile-gen prints Dockerfile for the specified architecture.

EXAMPLES:
  Build an Alpine-based image for the arm64v8 architecture:

    dockerfile-gen alpine arm64v8 >Dockerfile && \\
      docker build -t $(id -un)/mirakc:alpine-arm64v8 .

  Build a Debian-based image for the arm64v8 architecture:

    dockerfile-gen debian arm64v8 >Dockerfile && \\
      docker build -t $(id -un)/mirakc:debian-arm64v8 .

  Make Dockerfile for debugging with VS Code Remote Containers:

    dockerfile-gen --devcontainer amd64 >.devcontainer/Dockerfile
"""

from __future__ import print_function

import json
import os
import sys

from docopt import docopt

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATES_DIR= os.path.join(BASE_DIR, 'templates')

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)


class KindNotSupportedError(Exception):
  pass

class PlatformNotSupportedError(Exception):
  pass

class ArchNotSupportedError(Exception):
  pass


def dockerfile_gen(kind, platform, arch):
  if kind not in ['devcontainer', 'release']:
    raise KindNotSupportedError
  if platform not in ['alpine', 'debian']:
    raise PlatformNotSupportedError
  if arch not in ['amd64', 'arm32v6', 'arm32v7', 'arm64v8']:
    raise ArchNotSupportedError

  with open(os.path.join(TEMPLATES_DIR, 'params.json')) as file_:
    config = json.loads(file_.read())

  params = {
    'ARCH': arch,
    'RECDVB': '1.3.2',
    'MIRAKC_ARIB_VERSION': '0.6.1',
  }

  build_deps = set()
  for deps in config['build-deps'].values():
    build_deps = build_deps | set(deps)
  params['BUILD_DEPS'] = ' '.join(sorted(list(build_deps)))

  params.update(config[platform][arch])
  params['CARGO_TARGET_TRIPLE'] = \
    params['RUST_TARGET_TRIPLE'].upper().replace('-', '_')

  print('\n\n'.join([
    '#Dockerfile for %s' % kind,
    __render('{}.buildenv.dockerfile'.format(platform), params),
    __render('{}.deps.dockerfile'.format(platform), params),
    __render('{}.{}.dockerfile'.format(platform, kind), params),
  ]))


def __render(filename, params):
  with open(os.path.join(TEMPLATES_DIR, filename)) as file_:
    return file_.read().format(**params)

def main(args):
  if args['--devcontainer']:
    kind = 'devcontainer'
    platform = 'debian'
  else:
    kind = 'release'
    platform = args['<platform>']

  arch = args['<arch>']

  try:
    dockerfile_gen(kind, platform, arch)
  except PlatformNotSupportedError:
    eprint('Platform not supported: %s' % platform)
    return -1
  except ArchNotSupportedError:
    eprint('Arch not supported: %s' % arch)
    return -1
  return 0


if __name__ == "__main__":
  sys.exit(main(docopt(__doc__)))
